package com.gmail.alexflanker89.lesson5.dao.repository;import com.gmail.alexflanker89.lesson5.dao.interfaces.AuthorRepository;import com.gmail.alexflanker89.lesson5.domain.Author;import com.gmail.alexflanker89.lesson5.domain.Book;import com.gmail.alexflanker89.lesson5.execptions.AuthorNotExistException;import org.springframework.stereotype.Repository;import org.springframework.transaction.annotation.Transactional;import javax.persistence.EntityManager;import java.util.ArrayList;import java.util.HashSet;import java.util.List;import java.util.Set;@Transactional@SuppressWarnings("JpaQlInspection")@Repositorypublic class AuthorRepositoryJpa extends BaseRepositoryImpl<Author> implements AuthorRepository {    public AuthorRepositoryJpa(EntityManager entityManager) {        super(entityManager);    }    @SuppressWarnings("unchecked")    @Override    public List<Author> findByBook(Set<Book> books) throws AuthorNotExistException {        List authors = new ArrayList();        try{            authors = entityManager.createQuery("select distinct a from Author a inner join a.books b where b in (:books)").setParameter("books", books).getResultList();        }        catch (IllegalStateException e){            throw new AuthorNotExistException("нет такого автора!");        }        return authors;    }    @SuppressWarnings("unchecked")    @Override    public Set<Author> findByNameAndLastname(String name, String lastname) {        return new HashSet<>(entityManager.createQuery("select distinct a from Author a where a.name = :name and a.lastname = :lastname")                .setParameter("name",name)                .setParameter("lastname",lastname)                .getResultList());    }}